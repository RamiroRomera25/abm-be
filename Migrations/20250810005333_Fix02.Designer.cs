// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using technical_tests_backend_ssr.Domain;

#nullable disable

namespace technical_tests_backend_ssr.Migrations
{
    [DbContext(typeof(TechnicalTestDbContext))]
    [Migration("20250810005333_Fix02")]
    partial class Fix02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("technical_tests_backend_ssr.Models.Auction", b =>
                {
                    b.Property<Guid>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("double");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("InitialPrice")
                        .HasColumnType("double");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserWinner")
                        .HasColumnType("longtext");

                    b.HasKey("AuctionId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("technical_tests_backend_ssr.Models.Movement", b =>
                {
                    b.Property<Guid>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuctionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PurchaseId")
                        .HasColumnType("char(36)");

                    b.HasKey("MovementId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("technical_tests_backend_ssr.Models.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("MoneyCollected")
                        .HasColumnType("double");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<double>("TargetPrice")
                        .HasColumnType("double");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PurchaseId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("technical_tests_backend_ssr.Models.Movement", b =>
                {
                    b.HasOne("technical_tests_backend_ssr.Models.Auction", "Auction")
                        .WithMany("Movements")
                        .HasForeignKey("AuctionId");

                    b.HasOne("technical_tests_backend_ssr.Models.Purchase", "Purchase")
                        .WithMany("Movements")
                        .HasForeignKey("PurchaseId");

                    b.Navigation("Auction");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("technical_tests_backend_ssr.Models.Auction", b =>
                {
                    b.Navigation("Movements");
                });

            modelBuilder.Entity("technical_tests_backend_ssr.Models.Purchase", b =>
                {
                    b.Navigation("Movements");
                });
#pragma warning restore 612, 618
        }
    }
}
